-- Starting litex
mkdir project-petalite
cd project-petalite
python3 -m venv venv
source venv/bin/activate
mkdir litex
cd litex
wget https://raw.githubusercontent.com/enjoy-digital/litex/master/litex_setup.py
chmod +x litex_setup.py
python3 ./litex_setup.py --init --install --config=full

cd ..
pip3 install meson ninja
sudo ./litex/litex_setup.py --gcc=riscv
pip3 install litex/litex -- looks redundant but is necessary
source /tools/Xilinx/Vivado/2024.2/settings64.sh


-- Chipyard:
1. Install conda
2. Run sudo apt-get install linux-image-generic
sudo apt install libguestfs-tools
3. Run installation as per documentation
4. source /home/franos/chipyard/env.sh


-- Vivado
sudo apt-get update
sudo apt-get install locales
sudo locale-gen en_US.UTF-8
sudo update-locale
source /tools/Xilinx/Vivado/2024.2/settings64.sh
vivado&


-- GTKWave
sudo apt install build-essential meson gperf flex desktop-file-utils libgtk-3-dev libbz2-dev libjudy-dev libgirepository1.0-dev
sudo apt install libgtk-4-dev
git clone "https://github.com/gtkwave/gtkwave.git"
cd gtkwave
sudo meson setup build && cd build && meson install


-- Yosis
source /home/franos/projects/project-petalite/tools/oss-cad-suite/environment


-- To run QuestaSim in Vivado:
1. Install the correct version of QuestaSim, which is 2024.1

1. Install compatible version of gcc, which for Questa 2024.1, is 7.4.
    1.1. Read https://chatgpt.com/c/68378209-0244-800a-b94b-61cb9fc717f0

sudo update-alternatives --config gcc

2. Change /home/franos/intelFPGA_pro/24.2/questa_fse/bin/vcom to add:
+elif echo "$@" | grep -q -- "-version" ; then
+  exec "$arg0" "$@" | sed 's@ Intel Starter FPGA Edition@Sim@'
around line 180, right at the end, or so.

3. In Vivado, go to Tools, Compile Simulation libs

4. Wait for compilation (around 1:20h or so)

5. Set:
export PATH=$PATH:/home/franos/intelFPGA_pro/24.2/questa_fse/bin
export LM_LICENSE_FILE=/home/franos/intelFPGA_pro/LR-236507_License.dat:$LM_LICENSE_FILE
::env(LM_LICENSE_FILE)  "/home/franos/intelFPGA_pro/LR-236507_License.dat"
puts $::env(LM_LICENSE_FILE)


-- Verilator
1. Follow tutorial in https://verilator.org/guide/latest/install.html, using Install into a Specific Prefix
2. Then do export PATH="/tools/verilator/v5.036-48-g0dc93c1d5/bin:$PATH"




# Commands
export PATH="/tools/verilator/v5.036-48-g0dc93c1d5/bin:$PATH"
./soc/host.py --sim --io-json=./soc/data/io_sim.json --compile-petalite-software --debug-bridge
./soc/firmware/main.py --src-dir=petalite --build-path=./build-soc/petalite --output-dir=build-firmware-petalite --firmware-name=firmware --mem=rom
./soc/host.py --sim --compile-gateware --io-json=./soc/data/io_sim.json --petalite-firmware=build-firmware-petalite/firmware.bin --sys-clk-freq=1e6 --debug-bridge
./soc/firmware/main.py --src-dir=host --build-path=./build-soc/host --output-dir=build-firmware-host --firmware-name=firmware --mem=rom
./soc/host.py --sim --compile-gateware --io-json=./soc/data/io_sim.json --host-firmware=build-firmware-host/firmware.bin --petalite-firmware=build-firmware-petalite/firmware.bin --sys-clk-freq=1e6 --load --debug-bridge
litex_server --udp --udp-ip=192.168.1.50
gtkwave build-soc/host/gateware/sim.fst
litex_cli --csr-csv="./build-soc/host/csr.csv" --read petalite_rsp_value



export PATH="/tools/verilator/v5.036-48-g0dc93c1d5/bin:$PATH"
./soc/host_debug.py --sim --io-json=./soc/data/io_sim.json --debug-bridge
./soc/firmware/main.py --src-dir=host_debug --build-path=./build-soc/host --output-dir=build-firmware-host --firmware-name=firmware --mem=rom
./soc/host_debug.py --sim --compile-gateware --io-json=./soc/data/io_sim.json --host-firmware=build-firmware-host/firmware.bin --sys-clk-freq=1e6 --load --debug-bridge









./soc/firmware/main.py --src-dir=host --build-path=./build-soc/host --output-dir=build-firmware-host --firmware-name=firmware --mem=rom
gtkwave build-soc/host/gateware/sim.fst
./soc/host.py --sim --io-json=./soc/data/io_sim.json --debug




./soc/soc.py --sim --compile-gateware --io-json=./soc/data/io_sim.json --firmware=firmware/firmware.bin --sys-clk-freq=1e6
./soc/soc.py --sim --compile-gateware --io-json=./soc/data/io_sim.json --firmware=firmware/firmware.bin --sys-clk-freq=1e6 --load

./soc/soc.py --sim --compile-gateware --io-json=./soc/data/io_sim.json --firmware=build/software/bios/bios.bin --sys-clk-freq=1e6 --load
gtkwave build/gateware/sim.fst

litex_sim --cpu-type=rocket --cpu-variant=small --bus-data-width=64 --no-compile-gateware
litex_sim --cpu-type=rocket --cpu-variant=small --bus-data-width=64 --rom-init=build/sim/software/bios/bios.bin


-- Adding swap mem to SoC:
sudo swapoff -a
sudo rm /swapfile
sudo fallocate -l 64G /swapfile
sudo chmod 600 /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
free -h


-- USB access in WSL:
winget install --interactive --exact dorssel.usbipd-win
usbipd list
usbipd bind --busid <busid>
usbipd attach --wsl --busid <busid>
lsusb (in linux)

Also, install Xilinx drivers:
cd <Vivado Install>/data/xicom/cable_drivers/lin64/install_script/install_drivers/
sudo ./install_drivers




-- Litex:
-- To simulate an arbitrary SoC, you do:
if __name__ == "__main__":
    soc = MySoC()
    builder = Builder(soc, output_dir="build")
    builder.build(sim_config={"tool": "litex_sim"})  # Build with simulation configuration

    # Run the simulation; you can also pass options like trace generation.
    run_simulation(soc, vcd_name="my_soc.vcd")


-- To simulate, you need:
1. A module at the SoC capable of communication (Etherbone)
2. A client to bridge the simulation with your interaction (litex_client)
3. A python script with whatever you want to simulate

Example:
1. litex_sim --with-etherbone --csr-csv=csr.csv
2. litex_server --udp --udp-ip=192.168.1.50
3. Script below:
from litex import RemoteClient
wb = RemoteClient()
wb.open()
# get identifier
fpga_id = ""
print("identifier_mem: ")
for i in range(256):
    c = chr(wb.read(wb.bases.identifier_mem + 4*i) & 0xff)
    fpga_id += c
    if c == "\0":
        break
print("fpga_id: " + fpga_id)
wb.close()

Default port is 192.168.1.50.
